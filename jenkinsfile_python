pipeline {
    agent {
        docker {
            image 'docker:latest'  // Use a Docker CLI image
            args '-v /var/run/docker.sock:/var/run/docker.sock\
                    --user root \
                    -v /home/appadmin/Desktop/jenkins/myproject:/home/appadmin/Desktop/jenkins/myproject \
                    -e HOME=/home/appadmin/Desktop/jenkins/myproject' // Access host Docker
        }
    }

    environment {
        IMAGE_NAME = 'python-app' // We'll tag the image with this name
        SERVICE_NAME = 'python-service'
    }

    stages {

        // üëá This stage pulls your Git repo code into the Jenkins workspace
        stage('Checkout Code') {
            steps {
                
                git branch: 'main', url: 'https://github.com/Soni8945/python_cicd_pipeline.git'
                // ‚¨áÔ∏è This is where Jenkins pulls from the Git repository (defined in Jenkins Job UI)
                // checkout scm
            }
        }

        // üëá Build Docker image using the Dockerfile from the pulled repo
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t $IMAGE_NAME ." // Builds image from current directory
                }
            }
        }

        // üëá Run the built Docker container
        stage('Run Docker Container') {
            steps {
                script {
                    sh """
                    if [ \$(docker ps -q -f name=${CONTAINER_NAME}) ]; then
                        echo "Stopping container ${CONTAINER_NAME}..."
                        docker stop ${CONTAINER_NAME}
                        docker rm ${CONTAINER_NAME}
                        docker run -d --name python-service --network host $IMAGE_NAME
                    else
                        docker run -d --name python-service --network host $IMAGE_NAME 
                    fi
                    """
                    // sh "docker run -d --name python-service --network host $IMAGE_NAME" // Runs the image and removes the container after
                }
            }
        }
    }
} 
