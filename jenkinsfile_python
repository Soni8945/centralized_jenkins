pipeline {
    agent {
        docker {
            image 'docker:latest'  // Use a Docker CLI image
            args '-v /var/run/docker.sock:/var/run/docker.sock\
                    --user root \
                    -v /home/appadmin/Desktop/jenkins/myproject:/home/appadmin/Desktop/jenkins/myproject \
                    -e HOME=/home/appadmin/Desktop/jenkins/myproject' // Access host Docker
        }
    }

    environment {
        IMAGE_NAME = 'python-app' // We'll tag the image with this name
        CONTAINER_NAME = 'python-service'
    }
    
    stages {

        // üëá This stage pulls your Git repo code into the Jenkins workspace
        stage('Checkout Code') {
            steps {
                
                git branch: 'main', url: 'https://github.com/Soni8945/python_cicd_pipeline.git'
                // ‚¨áÔ∏è This is where Jenkins pulls from the Git repository (defined in Jenkins Job UI)
                // checkout scm
            }
        }

        // üëá Build Docker image using the Dockerfile from the pulled repo
        stage('Build Docker Image') {
            steps {
                script {
                    sh "docker build -t $IMAGE_NAME ."// Builds image from current directory
                    sh "docker inspect --format='{{.Id}}' $IMAGE_NAME"
                }
            }
        }

        // üëá Run the built Docker container
        stage('Run Docker Container on test server') {
            steps {
                script {
                    sh """
                        CONTAINER_ID=\$(docker ps -aq -f name=^/${CONTAINER_NAME}\$)

                        if [ ! -z "\$CONTAINER_ID" ]; then
                            echo "Stopping and removing existing container: ${CONTAINER_NAME}..."
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID
                        fi

                        echo "Starting new container: ${CONTAINER_NAME}..."
                        docker run -d \
                            -p 7000:7000 \
                            --name ${CONTAINER_NAME} \
                            -e DB_HOST=10.36.0.134 \
                            -e DB_NAME=postgres \
                            -e DB_USER=remoteuser1 \
                            -e DB_PASS=12345678 \
                            --network host $IMAGE_NAME \
                            
                        docker inspect --format='{{.Id}}' $IMAGE_NAME

                    """
                }
            }
        }
        stage('approval to production'){
            steps{
                input message: "looks good in TEST ? Deploy to production?"   
            }
        }
        stage('Copy Docker Image to Production') {
            steps {
                sshagent(credentials: ['my-ssh-key-of-prod']) {
                    sh '''
                        docker save -o python-app.tar python-app:latest
                        scp -o StrictHostKeyChecking=no python-app.tar admin@10.36.0.63:/tmp/
                    '''
                }
            }
        }
        stage('Deploy to production') {
            steps {
                sshagent(credentials: ['my-ssh-key-of-prod']) {
                    sh """
                        ssh -o StrictHostKeyChecking=no admin@10.36.0.63 << 'EOF'
                        whoami
                        
                        docker load -i /tmp/python-app.tar
                        
                        CONTAINER_ID=\$(docker ps -aq -f name=^/${CONTAINER_NAME}\$)
        
                        if [ ! -z "\$CONTAINER_ID" ]; then
                            echo "Stopping and removing existing container: ${CONTAINER_NAME}..."
                            docker stop \$CONTAINER_ID || true
                            docker rm \$CONTAINER_ID
                        fi
        
                        echo "Starting new container: ${CONTAINER_NAME}..."
                        docker run -d \
                            -p 7000:7000 \
                            --name ${CONTAINER_NAME} \
                            -e DB_HOST=localhost \
                            -e DB_NAME=employeedb \
                            -e DB_USER=remoteuser1 \
                            -e DB_PASS=12345678 \
                            --network host ${IMAGE_NAME}
                            
                        docker inspect --format='{{.Id}}' $IMAGE_NAME
EOF
                    """
                }
            }
        }
    }
    post {
        success {
            emailext(
                from: '	mehul.kartikeyan@jindalsteel.com',  // Set sender email here
                subject: "SUCCESS: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "Build succeeded!\n\nCheck details: ${env.BUILD_URL}",
                to: "bikash.maharana@jindalsteel.com"
            )
        }

        failure {
            emailext(
                from: '	mehul.kartikeyan@jindalsteel.com',  // Set sender email here
                subject: "FAILURE: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'",
                body: "Build failed!\n\nCheck details: ${env.BUILD_URL}",
                to: "bikash.maharana@jindalsteel.com"
            )
        }
    }
} 
